import { ref, computed } from 'vue'\nimport { gsap } from 'gsap'\nimport { useToast } from 'vue-toastification'\nimport { useSound } from './useSound'\nimport { useConfetti } from './useConfetti'\nimport { COLORS, SPINNER_CONFIG } from '../utils/constants'\n\nexport function useSpinner() {\n  const toast = useToast()\n  const { playSpinSound, playWinSound } = useSound()\n  const { showConfetti } = useConfetti()\n  \n  const participants = ref([])\n  const isSpinning = ref(false)\n  const winner = ref(null)\n  const spinnerRef = ref(null)\n  \n  const wheelSegments = computed(() => {\n    if (participants.value.length === 0) return []\n    \n    return participants.value.map((participant, index) => {\n      const anglePerSegment = 360 / participants.value.length\n      const startAngle = (index * anglePerSegment) - 90\n      const endAngle = ((index + 1) * anglePerSegment) - 90\n      \n      return {\n        ...createSegmentPath(startAngle, endAngle, anglePerSegment),\n        color: COLORS[index % COLORS.length],\n        participant\n      }\n    })\n  })\n  \n  const createSegmentPath = (startAngle, endAngle, anglePerSegment) => {\n    const radius = SPINNER_CONFIG.RADIUS\n    const centerX = SPINNER_CONFIG.CENTER_X\n    const centerY = SPINNER_CONFIG.CENTER_Y\n    \n    const startAngleRad = (startAngle * Math.PI) / 180\n    const endAngleRad = (endAngle * Math.PI) / 180\n    \n    const x1 = centerX + radius * Math.cos(startAngleRad)\n    const y1 = centerY + radius * Math.sin(startAngleRad)\n    const x2 = centerX + radius * Math.cos(endAngleRad)\n    const y2 = centerY + radius * Math.sin(endAngleRad)\n    \n    const largeArcFlag = anglePerSegment > 180 ? 1 : 0\n    \n    const pathData = [\n      `M ${centerX} ${centerY}`,\n      `L ${x1} ${y1}`,\n      `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,\n      'Z'\n    ].join(' ')\n    \n    const midAngle = (startAngle + endAngle) / 2\n    const midAngleRad = (midAngle * Math.PI) / 180\n    const textRadius = radius * 0.7\n    \n    return {\n      path: pathData,\n      textX: centerX + textRadius * Math.cos(midAngleRad),\n      textY: centerY + textRadius * Math.sin(midAngleRad),\n      textRotation: midAngle + 90\n    }\n  }\n  \n  const spin = async (settings) => {\n    if (participants.value.length < 2 || isSpinning.value) return\n    \n    isSpinning.value = true\n    winner.value = null\n    \n    if (settings.soundEnabled) {\n      playSpinSound()\n    }\n    \n    const rotationAngle = calculateSpinRotation()\n    \n    await animateSpinner(rotationAngle, settings.spinDuration)\n    \n    const winnerIndex = calculateWinner(rotationAngle)\n    winner.value = participants.value[winnerIndex]\n    \n    if (settings.soundEnabled) {\n      playWinSound()\n    }\n    \n    if (settings.confettiEnabled) {\n      showConfetti()\n    }\n    \n    isSpinning.value = false\n    toast.success(`ðŸŽ‰ ${winner.value.name} wins!`)\n  }\n  \n  const calculateSpinRotation = () => {\n    const minSpins = SPINNER_CONFIG.MIN_SPINS\n    const maxSpins = SPINNER_CONFIG.MAX_SPINS\n    const spins = Math.random() * (maxSpins - minSpins) + minSpins\n    const segmentAngle = 360 / participants.value.length\n    const randomSegment = Math.floor(Math.random() * participants.value.length)\n    \n    return (spins * 360) + (randomSegment * segmentAngle) + (segmentAngle / 2)\n  }\n  \n  const animateSpinner = (angle, duration) => {\n    return new Promise(resolve => {\n      gsap.to(spinnerRef.value, {\n        rotation: angle,\n        duration,\n        ease: 'power3.out',\n        onComplete: resolve\n      })\n    })\n  }\n  \n  const calculateWinner = (finalAngle) => {\n    const normalizedAngle = (finalAngle % 360 + 360) % 360\n    const segmentAngle = 360 / participants.value.length\n    return Math.floor((360 - normalizedAngle) / segmentAngle) % participants.value.length\n  }\n  \n  return {\n    participants,\n    isSpinning,\n    winner,\n    spinnerRef,\n    wheelSegments,\n    spin\n  }\n}"