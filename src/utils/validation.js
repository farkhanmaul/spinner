import { PARTICIPANT_CONFIG, MESSAGES } from './constants'\n\nexport function validateParticipant(name, existingParticipants = []) {\n  const trimmedName = name?.trim()\n  \n  // Empty name validation\n  if (!trimmedName) {\n    return {\n      isValid: false,\n      message: MESSAGES.ERRORS.EMPTY_NAME\n    }\n  }\n  \n  // Name length validation\n  if (trimmedName.length > PARTICIPANT_CONFIG.MAX_NAME_LENGTH) {\n    return {\n      isValid: false,\n      message: MESSAGES.ERRORS.NAME_TOO_LONG\n    }\n  }\n  \n  // Duplicate name validation\n  const isDuplicate = existingParticipants.some(p => \n    p.name.toLowerCase() === trimmedName.toLowerCase()\n  )\n  \n  if (isDuplicate) {\n    return {\n      isValid: false,\n      message: MESSAGES.ERRORS.DUPLICATE_NAME\n    }\n  }\n  \n  return {\n    isValid: true,\n    name: trimmedName\n  }\n}\n\nexport function validateSpinRequirements(participantCount) {\n  if (participantCount < PARTICIPANT_CONFIG.MIN_PARTICIPANTS) {\n    return {\n      isValid: false,\n      message: MESSAGES.ERRORS.MIN_PARTICIPANTS_SPIN\n    }\n  }\n  \n  return { isValid: true }\n}\n\nexport function sanitizeInput(input) {\n  return input?.trim().replace(/[<>\"'&]/g, '') || ''\n}\n\nexport function truncateText(text, maxLength = 8) {\n  if (!text || text.length <= maxLength) return text\n  return text.substring(0, maxLength) + '...'\n}"